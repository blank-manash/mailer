from enum import Enum
from azure.appconfiguration import AzureAppConfigurationClient
from openai import OpenAI
from opencensus.ext.azure.log_exporter import AzureLogHandler
import logging


def get_client():
    connection_string = "Endpoint=https://mailer-config.azconfig.io;Id=3SvS;Secret=QYEZZBWH9lOjbDwAOkoL9/G2VnKndhSQMI4kXDEd0lU="
    return AzureAppConfigurationClient.from_connection_string(connection_string)


client = get_client()


def get(key: str) -> str:
    return client.get_configuration_setting(key=key).value


def get_chat_client(model: str, response_type="text"):
    gpt_client = OpenAI(api_key=OPENAI_API_KEY)

    def _gpt_client(prompt: str):
        """
        Function to communicate with OpenAI's GPT-3.5.

        :param prompt: The input text to send to GPT-3.5.
        :param engine: The model to use. Default is "text-davinci-003", which is one of the GPT-3.5 models.
        :param max_tokens: The maximum number of tokens to generate. Default is None for no limit.
        :return: The text generated by GPT-3.5.
        """
        message = [{"role": "user", "content": prompt}]
        try:
            response = gpt_client.chat.completions.create(
                messages=message,
                model=model,
                max_tokens=None,
                response_format={"type": response_type},
            )
            answer = str(response.choices[0].message.content).strip()
            logging.info(
                f"""
Prom    pt: {str(prompt).strip()}
Resp    onse: {answer}
                """
            )
            return answer
        except Exception as e:
            logging.info(f"An error occurred: {e}")
            return None

    return _gpt_client


class Emails(Enum):
    ME = "mximpaid@gmail.com"
    GAMAKSHI = "gamakshigama2001@gmail.com"
    MAILER = "gamakshi.mail@gmail.com"


class GPTModels(Enum):
    GPT3 = "gpt-3.5-turbo"
    GPT4 = "gpt-4-1106-preview"


RECIPIENT = Emails.GAMAKSHI.value
USER = Emails.MAILER.value
CC = Emails.ME.value
DEBUG = False if get("DEBUG") == "false" else True


RAPID_API_KEY = get("RAPID-API-KEY")
RAPID_API_HOST = get("RAPID-API-HOST")

PASSWORD = get("PASSWORD")
OPENAI_API_KEY = get("OPEN-API-KEY")


def get_logger():
    """
    Create and configure a logger to send logs to Azure Application Insights.
    The logger's name will be set to the name of the module where it is imported.

    :param instrumentation_key: Instrumentation key for your Azure Application Insights resource.
    :return: Configured logger.
    """

    LOG_KEY = get("LOG-KEY")
    # Create a logger with the name of the module where it is imported
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    # Create Azure Monitor handler
    azure_handler = AzureLogHandler(connection_string=f"InstrumentationKey={LOG_KEY}")

    # Add Azure Monitor handler to logger
    logger.addHandler(azure_handler)

    return logger
